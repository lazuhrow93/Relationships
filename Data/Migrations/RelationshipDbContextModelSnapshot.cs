// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(RelationshipDbContext))]
    partial class RelationshipDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_character");

                    b.ToTable("character");
                });

            modelBuilder.Entity("Entities.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterEndId")
                        .HasColumnType("int")
                        .HasColumnName("character_end_id");

                    b.Property<int>("CharacterStartId")
                        .HasColumnType("int")
                        .HasColumnName("character_start_id");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int")
                        .HasColumnName("connection_type");

                    b.HasKey("Id")
                        .HasName("pk_connection");

                    b.HasIndex("CharacterEndId")
                        .HasDatabaseName("ix_connection_character_end_id");

                    b.HasIndex("CharacterStartId")
                        .HasDatabaseName("ix_connection_character_start_id");

                    b.ToTable("connection");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Entities.Connection", b =>
                {
                    b.HasOne("Entities.Character", "CharacterEnd")
                        .WithMany("EndConnections")
                        .HasForeignKey("CharacterEndId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_connection_character_end_id_character");

                    b.HasOne("Entities.Character", "CharacterStart")
                        .WithMany("StartConnections")
                        .HasForeignKey("CharacterStartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_connection_character_start_id_character");

                    b.Navigation("CharacterEnd");

                    b.Navigation("CharacterStart");
                });

            modelBuilder.Entity("Entities.Character", b =>
                {
                    b.Navigation("EndConnections");

                    b.Navigation("StartConnections");
                });
#pragma warning restore 612, 618
        }
    }
}
